#!/usr/bin/env node

// Module dependencies
const app = require('../app');
const debug = require('debug')('iotserver:server');
const http = require('http');
const https = require('https');
const normalizePort = require('normalize-port');
const fs = require('fs');

// https or http
const httpsOn = fs.existsSync('/OpenSSL/keys/privatekey.pem');
const options = (httpsOn) ? {
  key: fs.readFileSync('/OpenSSL/keys/privatekey.pem', 'utf8'),
  cert: fs.readFileSync('/OpenSSL/keys/certificate.pem', 'utf8')
}: {};

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || '3010');
app.set('port', port);

const server = (httpsOn) ? https.createServer(options, app) : http.createServer(app);

// Listen on provided port, on all network interfaces
server.listen(port, function(){
  console.log(((httpsOn) ? "https: " : "http: ") + 
  'listening on port ' + server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);

// and functions 
// Event listener for HTTP(s) server "error" event
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
